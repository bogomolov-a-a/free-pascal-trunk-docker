name: free-pascal-trunk-docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
env:
  IMAGE_NAME: free-pascal-with-lazbuild-trunk
  FREE_PASCAL_IMAGE_NAME: free-pascal-trunk
  FREE_PASCAL_LAZBUILD_IMAGE_NAME: lazbuild-trunk
  FREE_PASCAL_COMPILER_SOURCE: https://gitlab.com/freepascal.org/fpc/source.git
  FREE_PASCAL_COMPILER_BRANCH: main
  LAZARUS_SOURCE: https://gitlab.com/freepascal.org/lazarus/lazarus.git
  LAZARUS_BRANCH: main
jobs:

  push:
    # Ensure test job passes before pushing image.
    #needs: test

    runs-on: ubuntu-latest    

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          docker build . --file Dockerfile.fpc.trunk --tag $FREE_PASCAL_IMAGE_NAME --build-arg FREE_PASCAL_COMPILER_BRANCH=$FREE_PASCAL_COMPILER_BRANCH --build-arg FREE_PASCAL_COMPILER_SOURCE=$FREE_PASCAL_COMPILER_SOURCE
          docker build . --file Dockerfile.lazarus.trunk --tag $FREE_PASCAL_LAZBUILD_IMAGE_NAME --build-arg FPC_IMAGE_NAME=$FREE_PASCAL_IMAGE_NAME --build-arg LAZARUS_BRANCH=$LAZARUS_BRANCH --build-arg LAZARUS_SOURCE=$LAZARUS_SOURCE
          docker build . --file Dockerfile --tag $IMAGE_NAME --build-arg FPC_IMAGE_NAME=$FREE_PASCAL_IMAGE_NAME --build-arg LAZBUILD_IMAGE_NAME=$FREE_PASCAL_LAZBUILD_IMAGE_NAME

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

